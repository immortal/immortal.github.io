<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on immortal</title>
    <link>https://immortal.run/post/</link>
    <description>Recent content in Posts on immortal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright> </copyright>
    <lastBuildDate>Tue, 21 Mar 2017 12:04:36 +0100</lastBuildDate>
    
	<atom:link href="https://immortal.run/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How it works</title>
      <link>https://immortal.run/post/how-it-works/</link>
      <pubDate>Tue, 21 Mar 2017 12:04:36 +0100</pubDate>
      
      <guid>https://immortal.run/post/how-it-works/</guid>
      <description>⭕ immortal runs a command or script detached from the controlling terminal as a Unix daemon, it will supervise and restart the service if it has been terminated. The service can be controlled by querying a Unix socket &amp;ldquo;immortal.sock&amp;rdquo; (immortalctl), this allows to remotely have full control over the service if required by exposing the socket using a web server like Nginx.
immortal - Starts and monitor a service immortaldir - Directory to scan for services *.</description>
    </item>
    
    <item>
      <title>The problem to solve</title>
      <link>https://immortal.run/post/the-problem-to-solve/</link>
      <pubDate>Wed, 20 Jul 2016 21:07:15 +0200</pubDate>
      
      <guid>https://immortal.run/post/the-problem-to-solve/</guid>
      <description>A common way to start up services Either you are using macOs, FreeBSD, or any Linux variant the idea is to simplify how process/services are keep up and running, without need to worry about special environments or paths.
A single run.yml file should be enough for start and supervise the services, or used as a template within automation tools like Saltstack, Ansible, etc.
Follow PID In some cases it is required to supervise applications that daemonize by default.</description>
    </item>
    
    <item>
      <title>run.yml</title>
      <link>https://immortal.run/post/run.yml/</link>
      <pubDate>Wed, 06 Jul 2016 20:35:39 +0200</pubDate>
      
      <guid>https://immortal.run/post/run.yml/</guid>
      <description>immortal -c run.yml A configuration file for running/logging/supervising:
cmd: bundle exec unicorn -c unicorn.rb cwd: /arena/app-1 env: DEBUG: 1 ENVIRONMENT: production pid: follow: /arena/app-1/unicorn.pid parent: /arena/app-1/parent.pid child: /arena/app-1/child.pid log: file: /var/log/app-1.log age: 86400 # seconds num: 7 # int size: 1 # MegaBytes timestamp: true # will add timesamp to log logger: logger -t unicorn user: www wait: 1 require: - foo - bar  One of the main ideas behind the run.</description>
    </item>
    
    <item>
      <title>retries</title>
      <link>https://immortal.run/post/retries/</link>
      <pubDate>Wed, 06 Jul 2016 20:34:39 +0200</pubDate>
      
      <guid>https://immortal.run/post/retries/</guid>
      <description>In some cases, you may not want to run a command forever, here is where the option -r / retries becomes useful.
This option normally is only used directly from the command line, for example:
immortal -w 60 -r 3 rsync -aHAXxv --numeric-ids --delete -P &amp;lt;src&amp;gt; user@host:/&amp;lt;dest&amp;gt;  In this case immortal will wait -w 60 seconds before starting and it will only try to run the command for 3 times after that it will exit.</description>
    </item>
    
    <item>
      <title>stderr</title>
      <link>https://immortal.run/post/stderr/</link>
      <pubDate>Wed, 06 Jul 2016 20:35:39 +0201</pubDate>
      
      <guid>https://immortal.run/post/stderr/</guid>
      <description>STDOUT &amp;amp; STDERR By just using the option log the output file combine the standard output and the standard error, in case a file is required per each output the stderr could be used, for example:
cmd: command log: file: /var/log/app.log age: 86400 # seconds num: 7 # int size: 1 # MegaBytes stderr: file: /var/log/app-error.log age: 86400 # seconds num: 7 # int size: 1 # MegaBytes timestamp: true # will add timesamp to log  In this case only the STDOUT will be written to /varlog/app.</description>
    </item>
    
    <item>
      <title>Using Nginx</title>
      <link>https://immortal.run/post/nginx/</link>
      <pubDate>Fri, 26 Mar 2010 23:14:08 +0200</pubDate>
      
      <guid>https://immortal.run/post/nginx/</guid>
      <description>To expose the services via web Nginx can be used.
Configuration example:
upstream immortal { server unix:/var/run/immortal/sleep/immortal.sock; } server { listen 80 default_server; server_name _; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-NginX-Proxy true; proxy_http_version 1.1; # for keep-alive proxy_pass http://immortal/; proxy_redirect off; } }  Based on the setup, permissions for the socket may need to be changed:
$ chmod 766 /var/run/immortal/&amp;lt;service name&amp;gt;/immortal.sock  To check the service status:</description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>https://immortal.run/post/ansible/</link>
      <pubDate>Fri, 26 Mar 2010 23:10:08 +0200</pubDate>
      
      <guid>https://immortal.run/post/ansible/</guid>
      <description>Example of a basic ansible playbook for deploying a micro service using a configuration file:
- hosts: your-host become: true tasks: - name: create arena file: path=/arena/foo/releases state=directory - name: set now variable set_fact: now: &amp;quot;{{ ansible_date_time.iso8601 }}&amp;quot; - name: create arena release dir file: path=/arena/foo/releases/{{ now }} state=directory - name: download app.bz2 get_url: url: &amp;quot;http://domain.tld/foo/{{ &#39;freebsd&#39; if ansible_os_family == &#39;FreeBSD&#39; else &#39;linux&#39; }}/app.tar.bz2&amp;quot; dest: /arena/foo/releases/{{ now }} - name: unarchive app.</description>
    </item>
    
    <item>
      <title>immortal</title>
      <link>https://immortal.run/post/immortal/</link>
      <pubDate>Thu, 25 Mar 2010 23:34:54 +0200</pubDate>
      
      <guid>https://immortal.run/post/immortal/</guid>
      <description>⭕ immortal runs a command or script detached from the controlling terminal as a Unix daemon, it will supervise and restart the service if it has been terminated. The service can be controlled by querying a Unix socket &amp;ldquo;immortal.sock&amp;rdquo;, this allows to remotely have full control over the service if required by exposing the socket using a web server like Nginx.
immortal [-v] [-ctl dir] [-d dir] [-e dir] [-f pidfile] [-l logfile] [-logger logger] [-p child_pidfile] [-P supervisor_pidfile] [-u user] command  -d dir Change to directory &amp;lt;dir&amp;gt; before starting the command</description>
    </item>
    
    <item>
      <title>immortalctl</title>
      <link>https://immortal.run/post/immortalctl/</link>
      <pubDate>Wed, 24 Mar 2010 23:34:54 +0200</pubDate>
      
      <guid>https://immortal.run/post/immortalctl/</guid>
      <description>immortalctl control services started by immortal
immortalctl [options] [-12achikinouqstvw] [*|service]  immortalctl by default prints the status of any available processes started by immortal, it first searches for user process located in $HOME/.immortal and next on the system global services started by immortaldir located by default in /var/run/immortal unless this has been changed by defining the environment var IMMORTAL_SDIR.
When no services found the output will be a single row only with the headers:</description>
    </item>
    
    <item>
      <title>immortaldir</title>
      <link>https://immortal.run/post/immortaldir/</link>
      <pubDate>Tue, 23 Mar 2010 23:34:54 +0200</pubDate>
      
      <guid>https://immortal.run/post/immortaldir/</guid>
      <description>immortaldir start services located in a specified directory.
immortalctl [dir] [-v]  immortaldir will watch for changes in the specified directory kqueue(2), if using Linux, will scan the directory every 5 seconds searching for files ending in .yml and track changes. The files should conform the immortal configuration format.
If a file changes the service will be restarted, immortalctl exit &amp;amp; stop.
If a file is touched and service is down, it will be started, immortalctl start.</description>
    </item>
    
    <item>
      <title>how to install &amp; setup</title>
      <link>https://immortal.run/post/how-to-install/</link>
      <pubDate>Mon, 22 Mar 2010 23:34:54 +0200</pubDate>
      
      <guid>https://immortal.run/post/how-to-install/</guid>
      <description>At the moment of writing this document currently immortal can be installed in macOS via homebrew and FreeBSD (ports/pkg), therefore if you are familiar with your current operating system would be nice if you could contribute by creating a native port in order to make more simple the installation process.
Installing on linux The easy way so far is to install a precompiled release, download the latest one that matches your architecture (*.</description>
    </item>
    
    <item>
      <title>Systemd</title>
      <link>https://immortal.run/post/systemd/</link>
      <pubDate>Sun, 21 Mar 2010 23:10:07 +0200</pubDate>
      
      <guid>https://immortal.run/post/systemd/</guid>
      <description>To start immortaldir on Linux with systemd, put this script in /etc/systemd/system/immortaldir.service:
[Unit] Description=immortaldir After=network.target [Service] ExecStart=/usr/bin/immortaldir /etc/immortal 2&amp;gt;&amp;amp;1 | logger -t immortaldir KillMode=process Restart=always Restart=on-failure Type=simple User=root [Install] WantedBy=multi-user.target  </description>
    </item>
    
  </channel>
</rss>